name: release

on:
  # schedule:
  # - cron: '0 0 * * *' # midnight UTC

  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    ## - release

env:
  BIN_NAME: proxide
  PROJECT_NAME: proxide
  REPO_NAME: ramiroaisen/proxide
  # BREW_TAP: jondot/homebrew-tap
  CARGO_TERM_COLOR: always
  # change this to 1 or 0 to enable/disable stripping debug info from binaries
  STRIP_BINARIES: '0'

jobs:
  
  build:
  
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [
          x86_64-linux-gnu,
          # x64_64-linux-musl,
          aarch64-linux-gnu,
          x86_64-macos,
          x86_64-windows
        ] #, x86_64-win-gnu, win32-msvc # 
        include:
        
        - build: x86_64-linux-gnu
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        
        # - build: x64_64-linux-musl
        #   os: ubuntu-20.04
        #   rust: stable
        #   target: x86_64-unknown-linux-musl
        #   cross: false
        
        - build: aarch64-linux-gnu
          os: ubuntu-20.04
          rust: stable
          target: aarch64-unknown-linux-gnu
          cross: true
        
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
        
        - build: x86_64-windows
          os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false
        
        # - build: aarch64-macos
        #   os: macos-latest
        #   rust: stable
        #   target: aarch64-apple-darwin
        # - build: x86_64-win-gnu
        #   os: windows-2019
        #   rust: stable-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2019
        #   rust: stable
        #   target: i686-pc-windows-msvc

    runs-on: ${{ matrix.os }}
  
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - uses: hecrj/setup-rust-action@v2
        with:
          targets: ${{ matrix.target }}

      # - uses: Swatinem/rust-cache@v2
      #   with:
      #     shared-key: ""
      #     cache-targets: "true"
      #     cache-on-failure: "true"
      #     cache-all-crates: "true"
      #     save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}


      # strip - discard symbols and other data from object files
      # see: https://www.man7.org/linux/man-pages/man1/strip.1.html
      - name: Strip release binary (linux and macos)
        if: env.STRIP_BINARIES == '1' && (matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos')
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      # strip, see above
      - name: Strip release binary (arm)
        if: env.STRIP_BINARIES == '1' && matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      # copy bin to dist/ folder
      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # download the binaries uploaded by the build jobs
      - uses: actions/download-artifact@v4

      # list all bin files
      - run: ls -al bins-*

      # set TAG env variable
      - id: tagname
        name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV

      # create compressed files at dist/ folder
      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.gz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      # Automatic release changelog
      - id: changelog
        name: Generate release changelog
        if: startsWith(github.ref, 'refs/tags/')
        uses: mikepenz/release-changelog-builder-action@v4.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # upload files in dist/ to the tag's release as assets
      - id: upload-release-assets
        name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2.9.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          body: ${{ steps.changelog.outputs.changelog }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
                  
      # - uses: mislav/bump-homebrew-formula-action@v1
      #   with:
      #     formula-path: ${{env.PROJECT_NAME}}.rb
      #     homebrew-tap: ${{ env.BREW_TAP }}
      #     download-url: "https://github.com/${{ env.REPO_NAME }}/releases/download/${{ steps.extract-version.outputs.tag-name }}/${{env.PROJECT_NAME}}-${{ steps.extract-version.outputs.tag-name }}-x86_64-macos.tar.xz"
      #     commit-message: updating formula for ${{ env.PROJECT_NAME }}
      #   env:
      #     COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        #
        # you can use this initial file in your homebrew-tap if you don't have an initial formula:
        # <projectname>.rb
        #
        # class <Projectname capitalized> < Formula
        #   desc "A test formula"
        #   homepage "http://www.example.com"
        #   url "-----"
        #   version "-----"
        #   sha256 "-----"

        #   def install
        #     bin.install "<bin-name>"
        #   end
        # end

      
      # Uncomment this section if you want to release your package to crates.io
      # Before publishing, make sure you have filled out the following fields:
      # license or license-file, description, homepage, documentation, repository, readme.
      # Read more: https://doc.rust-lang.org/cargo/reference/publishing.html

      # - name: Install ${{ matrix.rust }} toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     profile: minimal
      #     toolchain: ${{ matrix.rust }}
      #     target: ${{ matrix.target }}
      # - run: cargo publish --token ${CRATES_TOKEN}
      #  env:
      #    CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}